- Inizializzazione server
- Inizializzazione client

LOBBY:
- Attraverso lobby, nel momento in cui si inizializza 1 client, si popola la waitingConnection (lista)
- If(waitingConnection == 1) --> setupGame da parte del giocatore1
- If(waitingConnection == 2/3) --> startGame

SETUPGAME GIOCATORE1:
- Richiedere se utilizzare CLI o GUI
- Richiesta nickname --> Costruttore crea Player1 (impostare isFirstPlayer)
- (Data di nascita, colore: a scelta tra 3 colori)
- Richiesta numero giocatori --> setNumberPlayer

SETUPGAME GIOCATORE2/3:
- Richiedere se utilizzare CLI o GUI
- Richiesta nickname --> Costruttore crea Player2/3
- (Data di nascita, colore: a scelta tra quelli rimasti)

SETUPGAME CHALLENGER (il più giovane?):
- Instaziazione deck --> View richiede elenco carte (e mostra a display) --> View notifica a controller carta scelta
- Controller immagazzina carta1, poi carta2 (e carta3) --> Ricevuta l'ultima carta chiama chooseCards (passando il nome delle carte)
- chooseCard popola chosenCards (attraverso pickUpCard)

SCELTA CARTE GODS/POSIZIONE INIZIALE WORKER:
- Posizionamento iniziale worker in ordine di età
- View richiede elenco chosenCards per secondo Player più giovane --> secondo Player più giovane sceglie la carta --> View notifica al controller la scelta
- Controller chiama pickUpCard --> Viene associata al player la carta scelta e viene rimossa da chosenCards
- (se giocano in 3) Player3 esegue anch'esso la scelta
- Rimane 1 sola carta che viene automaticamente assegnata al giocatore Player1 dal Controller

GIOCO PARTE (dal giocatore più giovane)




ESEMPIO FLUSSO DI ESECUZIONE TURNO

Possibili valori delle mosse:
MOVE, MOVE_NOT_UP, MOVE_OPPONENT_SLOT
BUILD, BUILD_NOT_SAME_PLACE, BUILD_DOME_ANY_LEVEL

Arraylist<Classe tipo Enum>moveSequence = new ArrayList<>();

Per popolare moveSequence, quando il controller "finisce il turno" e chiama turn.updateTurn(), il model legge il file xml
Una volta popolata moveSequence, il model notifica view e controller passando la sequenza di mosse
-> La view inizia a chiedere al giocatore la mossa da fare

Esempi:
moveSequence: MOVE, BUILD                                       (<- Sequenza mosse standard)
moveSequence: MOVE, BUILD oppure BUILD, MOVE_NOT_UP, BUILD      (<- Esempio avendo Prometheus)

View: "Scrivi le coordinate della tua mossa: "
-> Verifica le coordinate (e le verifica anche il controller) -> Esegue la mossa
-> Si passa a BUILD (passano a build sia la view che il controller? O solo il controller che poi notifica la view?)
View: "Scrivi dove vuoi costruire: "
-> Verifica la costruzione (lo fa anche il controller) -> Esegue la mossa
-> Se il giocatore può eseguire altre mosse "precaricate" in moveSequence: la view fa richiesta delle nuove coordinate.


move worker1 3,3        (<- NO (non ci serve chiedere))
worker1 3,3

"Se vuoi costruire, inserisci le coordinate: " -> Se il giocatore scrive "none" -> La mossa viene considerata rifiutata


